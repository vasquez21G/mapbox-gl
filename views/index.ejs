<!DOCTYPE html>
<html lang="en">
	<head>
		<!--hola-->
		<meta charset="UTF-8" />
		<meta http-equiv="X-UA-Compatible" content="IE=edge" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<link
			href="https://api.mapbox.com/mapbox-gl-js/v2.9.2/mapbox-gl.css"
			rel="stylesheet"
		/>
		<script src="https://api.mapbox.com/mapbox-gl-js/v2.9.2/mapbox-gl.js"></script>
		<link rel="stylesheet" href="estilos.css" />
		<link href="output.css" rel="stylesheet" />
		<title>Map App</title>
	</head>
	<body class="bg-slate-50 p-5">
		<% const tokenID = locals.tokenID %>
		<div class="flex justify-center drop-shadow-xl m-2">
			<div
				id="map"
				class="rounded-xl"
				style="height: 350px; width: 100%"
			></div>
		</div>
		<div class="m-2 mt-5 flex flex-col flex-grow gap-4">
			<h1
				class="flex-auto self-center text-xl font-medium text-slate-400"
			>
				Markers Dashboard
			</h1>
		</div>

		<div class="m-2 mt-5 flex flex-row flex-grow flex-1 gap-4">
			<div
				class="flex flex-col min-w-max max-w-xl bg-white border drop-shadow-xl rounded-md 2 p-6"
			>
				<h1
					class="flex-auto text-lg font-semibold text-slate-700 self-center"
				>
					Create New Marker
				</h1>
				<div class="gap-2 grid grid-cols-1 mt-3">
					<input
						type="text"
						placeholder="Nombre del Marcador"
						name="markerName"
						id="markerName"
						class="text-slate-500 p-1 border rounded-md focus:outline-none focus:border-sky-300"
					/>
					<input
						type="number"
						placeholder="Latitud"
						name="iLat"
						id="iLat"
						class="text-slate-500 p-1 border rounded-md focus:outline-none focus:border-sky-300"
					/>
					<input
						type="number"
						placeholder="Longitud"
						name="iLng"
						id="iLng"
						class="text-slate-500 p-1 border rounded-md focus:outline-none focus:border-sky-300"
					/>
				</div>
				<div class="mt-4">
					<button
						id="btnMarker"
						class="bg-slate-500 text-white rounded-sm py-1 px-3 w-full"
						type="button"
					>
						Set Marker
					</button>
				</div>
			</div>
			<div class="w-full rounded-md shadow-lg bg-slate-50">
				<table id="tableMarkers" class="w-full">
					<tr class="bg-sky-100 text-blue-900 text-left">
						<th class="p-2">Markers</th>
						<th class="p-2">Lat</th>
						<th class="p-2">Lng</th>
						<th class="p-2">Controls</th>
					</tr>
					<tbody
						id="tBMarkers"
						class="table-row-group bg-slate-50 text-sky-900"
					></tbody>
				</table>
			</div>
			<div
				class="min-h-full bg-white border drop-shadow-xl rounded-md self-start p-6 flex flex-col"
			>
				<h1 class="font-semibold text-slate-700">Counter Markers</h1>
				<h1
					class="text-6xl text-center self-center text-slate-600 p-5 m-auto"
					id="counterMarkers"
				>
					0
				</h1>
			</div>
		</div>
	</body>
</html>

<script>
	function getMap() {
		mapboxgl.accessToken = '<%- tokenID %>'
		var map = new mapboxgl.Map({
			container: 'map',
			style: 'mapbox://styles/mapbox/streets-v11',
			center: [-73.935242, 40.73061],
			zoom: 0,
		})
		return map
	}
	function setMarker(lng, lat, containerID, element) {
		try {
			const marker = new mapboxgl.Marker({
				draggable: true,
				element: element,
			})
				.setLngLat([lng, lat])
				.addTo(containerID)

			marker.on('dragend', function (e) {
				getMarkers(marker, true)
			})

			getMarkers(marker, false, false)
			document.getElementById('iLat').value = ''
			document.getElementById('iLng').value = ''
			document.getElementById('markerName').value = ''

			return marker
		} catch (error) {
			console.error(error)
		}
	}
	const map = getMap()
	document.getElementById('btnMarker').addEventListener('click', function () {
		try {
			const lat = document.getElementById('iLat').value
			const lng = document.getElementById('iLng').value
			const element = document.createElement('div')
			element.style = 'border-radius: 50%; width: 30px; height: 30px;'
			element.style.backgroundImage =
				'url("https://avatars.githubusercontent.com/u/9813715?v=4")'
			element.style.backgroundSize = 'cover'
			element.style.backgroundPosition = 'center'
			element.style.backgroundRepeat = 'no-repeat'
			element.className = 'text-white text-center'
			element.id = new Date().getTime()

			const marker = setMarker(lat, lng, map, element)
		} catch (error) {
			console.log(error)
		}
	})
	const counterMarkers = document.getElementById('counterMarkers')
	function getMarkers(marker, update, rem) {
		if (marker !== null && update == false && rem == false) {
			const m = {
				id: 'mk-' + marker.getElement().id,
				name: document.getElementById('markerName').value,
				lng: marker.getLngLat().lng,
				lat: marker.getLngLat().lat,
			}
			markers.push(m)

			const table = document.getElementById('tBMarkers')
			const row = document.createElement('tr')
			const name = document.createElement('td')
			const tdlng = document.createElement('td')
			const tdlat = document.createElement('td')
			const controls = document.createElement('td')
			const btnDelete = document.createElement('button')

			tdlat.classList.add('pl-2')
			tdlng.classList.add('pl-2')
			name.classList.add('pl-2')
			btnDelete.classList.add('bg-red-100', 'text-red-400', 'p-2', 'm-1')
			row.classList.add('text-sky-900', 'p-2')
			controls.classList.add('pl-2')

			name.innerHTML = m.name
			tdlng.innerHTML = m.lng
			tdlat.innerHTML = m.lat
			row.id = m.id
			btnDelete.innerHTML = 'Delete'
			btnDelete.onclick = () => removeMarker(marker, m)

			controls.append(btnDelete)
			row.append(name, tdlng, tdlat, controls)
			table.appendChild(row)
		}

		if (marker !== null && update == true) {
			const element = markers.find(
				(m) => m.id == 'mk-' + marker.getElement().id,
			)

			markers.splice(markers.indexOf(element), 1, {
				id: element.id,
				name: element.name,
				lng: marker.getLngLat().lng,
				lat: marker.getLngLat().lat,
			})

			const table = document.getElementById('tBMarkers')
			const row = document.getElementById(element.id)
			const tdlng = row.getElementsByTagName('td')[1]
			const tdlat = row.getElementsByTagName('td')[2]
			tdlng.innerHTML = marker.getLngLat().lng
			tdlat.innerHTML = marker.getLngLat().lat
		}

		counterMarkers.innerHTML = markers.length
	}
	function removeMarker(marker, m) {
		try {
			marker.remove()
		} catch (error) {}
		const table = document.getElementById('tBMarkers')
		const row = document.getElementById(m.id)
		table.removeChild(row)

		const found = markers.find((el) => el.id == m.id)
		markers.splice(markers.indexOf(found), 1)
		counterMarkers.innerHTML = markers.length
	}
	let markers = []
</script>
